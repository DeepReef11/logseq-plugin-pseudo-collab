/// <reference types="node" />
import { SettingSchemaDesc, StyleString, UIOptions } from './LSPlugin';
import { PluginLocal } from './LSPlugin.core';
import * as nodePath from 'path';
declare global {
    interface Window {
        api: any;
        apis: any;
    }
}
export declare const path: nodePath.PlatformPath;
export declare const IS_DEV: boolean;
export declare const PROTOCOL_FILE = "file://";
export declare const PROTOCOL_LSP = "lsp://";
export declare const URL_LSP: string;
export declare function getAppPathRoot(): Promise<string>;
export declare function getSDKPathRoot(): Promise<string>;
export declare function isObject(item: any): boolean;
export declare const deepMerge: {
    <TObject, TSource>(object: TObject, source: TSource): TObject & TSource;
    <TObject_1, TSource1, TSource2>(object: TObject_1, source1: TSource1, source2: TSource2): TObject_1 & TSource1 & TSource2;
    <TObject_2, TSource1_1, TSource2_1, TSource3>(object: TObject_2, source1: TSource1_1, source2: TSource2_1, source3: TSource3): TObject_2 & TSource1_1 & TSource2_1 & TSource3;
    <TObject_3, TSource1_2, TSource2_2, TSource3_1, TSource4>(object: TObject_3, source1: TSource1_2, source2: TSource2_2, source3: TSource3_1, source4: TSource4): TObject_3 & TSource1_2 & TSource2_2 & TSource3_1 & TSource4;
    (object: any, ...otherArgs: any[]): any;
};
export declare function genID(): string;
export declare function ucFirst(str: string): string;
export declare function withFileProtocol(path: string): string;
export declare function safetyPathJoin(basePath: string, ...parts: Array<string>): string;
export declare function safetyPathNormalize(basePath: string): string;
/**
 * @param timeout milliseconds
 * @param tag string
 */
export declare function deferred<T = any>(timeout?: number, tag?: string): {
    created: number;
    setTag: (t: string) => string;
    resolve: any;
    reject: any;
    promise: Promise<T>;
    readonly settled: boolean;
};
export declare function invokeHostExportedApi(method: string, ...args: Array<any>): any;
export declare function setupIframeSandbox(props: Record<string, any>, target: HTMLElement): () => Promise<void>;
export declare function setupInjectedStyle(style: StyleString, attrs: Record<string, any>): () => void;
export declare function setupInjectedUI(this: PluginLocal, ui: UIOptions, attrs: Record<string, string>, initialCallback?: (e: {
    el: HTMLElement;
    float: boolean;
}) => void): () => void;
export declare function transformableEvent(target: HTMLElement, e: Event): any;
export declare function setupInjectedTheme(url?: string): () => void;
export declare function mergeSettingsWithSchema(settings: Record<string, any>, schema: Array<SettingSchemaDesc>): Record<string, any>;
